@page
@using FinancialAssistant.DataTransfer.Enums
@model FinancialAssistant.Web.Pages.TransactionsModel
@{
    ViewData["Title"] = "Главная страница";
    ViewData["CssHref"] = "/css/transactions.css";
}

<div class="main-content">
    <div class="header">
        <div class="account-info">
            <span class="account-name">
                <select>
                    @foreach (var accountName in Model.AccountNames)
                    {
                        <option>@accountName</option>
                    }
                </select>
            </span>
            <span class="account-balance">Сумма счета: @Model.AccountBalance</span> 
        </div>
        <div class="account-selector">
            <select>
                @foreach (var month in Enum.GetValues(typeof(MonthsEnum)))
                {
                    if (month.Equals(Enum.GetValues(typeof(MonthsEnum)).GetValue(DateTime.Now.Month - 1)))
                    {
                        <option selected="selected">@month</option>
                        continue;
                    }
                    
                    <option>@month</option>
                }
            </select>
        </div>
        <div class="vertical-line"></div>
        <div class="summary">
            <div class="expenses">
                <h3>Расходы</h3>
                <span>Всего: @Model.TotalExpenses</span>
                <a href="@Url.Page("ExpenseDetails", new { id = Model.LastExpenseId })">Последний расход: @Model.LastExpenseAmount</a>
            </div>
            <div class="income">
                <h3>Доходы</h3>
                <span>Всего: @Model.TotalIncome</span>
                <a href="@Url.Page("IncomeDetails", new { id = Model.LastIncomeId })">Последний доход: @Model.LastIncomeAmount</a>
            </div>
        </div>
    </div>

    <h2>История</h2>
    <div class="transaction-list">
        @foreach (var transaction in Model.Transactions)
        {
            <div class="transaction-item"
                 data-id="@transaction.Id"
                 data-date="@transaction.Date.ToString("o")"
                 data-name="@transaction.Name"
                 data-category="@transaction.Category"
                 data-amount="@transaction.Amount"
                 data-account="@transaction.Account"
                 data-description="@transaction.Description"
                 onclick="openTransaction(this)">
            <span>@transaction.Date.ToShortDateString()</span>
            <span>@transaction.Name</span>
            <span>@transaction.Category</span>
            <span>@transaction.TransactionType</span>
            <span>@transaction.Amount</span>
            <span class="category-color" style="background-color: @transaction.CategoryColor;"></span>
        </div>
        }
    </div>
</div>

<div class="addTransaction">
    <button onclick="openTransaction()">Добавить транзакцию</button>
</div>
<div class="back-to-top">
    <button onclick="scrollToTop()">Вернуться наверх</button>
</div>

<div id="modal" class="modal">
    <div class="modal-content">
        <span class="close" id="closeModal" onclick="closeTransaction()">&times;</span>
        <h2>Изменить транзакцию</h2>
        
        <label>Название:</label>
        <input id="input__transaction__name" type="text"><br/><br/>

        <label>Счет:</label>
        <input id="input__transaction__account" type="text"><br/><br/>

        <label>Категория:</label>
        <input id="input__transaction__category" type="text"><br/><br/>

        <label>Сумма:</label>
        <input id="input__transaction__amount" type="text"><br/><br/>
        
        <label>Дата:</label>
        <input id="input__transaction__date" type="text"><br/><br/>

        <label>Описание:</label>
        <input id="input__transaction__description" type="text"><br/><br/>
        
        <button id="save" onclick="saveTransaction()">Сохранить</button>
        <button id="cancel" onclick="closeTransaction()">Отмена</button>
    </div>
</div>

<script>
    const modal = document.getElementById("modal");
    const inputAccount = document.getElementById("input__transaction__account");
    const inputName = document.getElementById("input__transaction__name");
    const inputCategory = document.getElementById("input__transaction__category");
    const inputAmount = document.getElementById("input__transaction__amount");
    const inputDate = document.getElementById("input__transaction__date");
    const inputDescription = document.getElementById("input__transaction__description");

    function openTransaction(element = null) {
        if (element === null){
            modal.style.display = "block";
            inputName.value = null;
            inputAccount.value = null;
            inputCategory.value = null;
            inputAmount.value = null;
            inputDate.value = null;
            inputDescription.value = null;
            return;
        }
        const transaction = {
            Id: element.getAttribute('data-id'),
            Date: element.getAttribute('data-date'),
            Name: element.getAttribute('data-name'),
            Category: element.getAttribute('data-category'),
            Amount: element.getAttribute('data-amount'),
            Account: element.getAttribute('data-account'),
            Description: element.getAttribute('data-description')
        };
        modal.style.display = "block";
        inputName.value = transaction.Name;
        inputAccount.value = transaction.Account;
        inputCategory.value = transaction.Category;
        inputAmount.value = transaction.Amount;
        inputDate.value = transaction.Date;
        inputDescription.value = transaction.Description;
    }

    function closeTransaction() {
        modal.style.display = "none";
    }

    function saveTransaction(){
        modal.style.display = "none";
    }

    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

    function scrollToTop() {
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }
</script>